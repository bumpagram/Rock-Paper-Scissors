//
//  Sign.swift
//  Rock Paper Scissors
//
//  Created by Denis Azarkov on 30.04.23.
//

import Foundation

enum Sign {
    case rock
    case paper
    case scissors
    
    var emoji: String {  // –∏—Å—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–Ω–∞—á–∫–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ—Ç–æ–º
        switch self {
        case .rock: return "üëä"
        case .paper: return "‚úã"
        case .scissors : return "‚úåÔ∏è"
        }
    }
    
    func compareValues(oppontentsTurn: Sign)-> GameState {  // —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã.
        //  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–±–µ–¥–∞/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ/–Ω–∏—á—å—è
        switch self {
            
        case .rock:
            switch oppontentsTurn {
            case .rock : return GameState.Draw
            case .paper : return GameState.Lose
            case .scissors : return GameState.Win
            }
    
        case .paper:
            switch oppontentsTurn {
            case .rock: return GameState.Win
            case .paper: return GameState.Draw
            case .scissors: return GameState.Lose
            }
            
        case .scissors:
            switch oppontentsTurn {
            case .rock: return GameState.Lose
            case .paper: return GameState.Win
            case .scissors : return GameState.Draw
            }
        }
    }
}

func randomSign() -> Sign {  // –¥–ª—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞. –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä
    let gotRandom = Int.random(in: 0...2)
    if gotRandom == 0  { return .rock}
    else if gotRandom == 1 { return .paper}
    else { return .scissors}
}
